20220421：
[修复]QSSmartScale：处理与 超级列表框 的兼容性问题

20220417：
[修复]修改QSHook可能阻止DLL优雅卸载的问题
    技术细节：
    黑月模式下全局类变量的析构函数中无法直接或间接使用数组（仅在编译为DLL时发生）
    猜测可能为在调用析构函数前就释放了黑月内部用于处理数组的一些辅助结构
    由于QSHook默认会在析构函数中执行卸载操作，且卸载过程需要使用数组变量，故如果存    在QSHook类型的全局变量，则此时会发生崩溃（内存读写错误）
    当前修改：
    修改QSHook卸载过程，不再使用原生的数组，而选择手动管理内存
[新增]QSSmartScale：
    自动按比例缩放窗口，支持字体缩放，完整支持高DPI缩放（可关闭），支持运行过程中DPI更改后的感知（PerMonitorV2，使用多个不同DPI的显示器时尤为重要）
    字体缩放基于未文档化的易语言窗口组件反射技术实现，不会引入未被使用的支持库，且理论支持所有组件（自动应用到所有Font类型的属性）
    注：黑月模式下可能无法自动完成对Static等不使用WM_SETFONT的组件的字体缩放
    Technical-Previewly，暂时不能很好地支持运行时需要代码移动组件的场景（因为懒 :D）

20190430：
[新增]QSHook：提供了InlineHook的支持【非暂停式】
[修复]序列_求最长公共子序列 中用于调试的 置剪辑板文本 已经去除
[修复]QSJson 在ANSI编码工作模式下，无法完整支持GBK/GB10830/BIG5字符集（冲码问题），此bug不影响对GB2312的完整支持

20180824：
[修复]QSJson_长整数、QSJson_双精度小数 不能在循环中使用的bug，感谢 [君安智能](QQ1351369213) 的反馈（技术细节：平栈错误，retn 8误写为retn 4。其实是从 QSJson_文本 复制粘贴后忘记改了）
[新增]QS时间（实现了SNTP客户端）
[新增]QS线程_传递字节集、QS线程_接收字节集、QS线程_传递文本、QS线程_接收文本
[新增]QS线程：轻量化线程池（TinyThreadPool）
[新增]QS序列操作【警告：当前主要用来测试设计方案可行性，测试阶段，随时修改API】
[修改]除类名/结构名外，全部去除QS前缀【！！！不兼容修改！！！】
[优化]调试时欢迎语展示模式
[信息]实在没啥时间搞，所以进度缓慢:(

20171008：
[修复]QSJson_Ref中ARC处理上的一个影响较大的bug（技术细节：解析_从字节集 中改节点地址后忘记更新ArcHelper了，导致该QSJson_Ref对象不能在多处被引用）
[优化]QSJson：运行效率
[新增]QS随机数：提供了MT19337随机数算法实现，与相应的均匀分布的缩放函数
[新增]QS哈希表：更多类型支持
[新增]QS哈希集合（QSHashSet）：归类于 QS哈希表 中
[新增]QS线程：读写锁、面向小白的通用线程参数传递方案（并不包含基本多线程操作命令，如：启动线程）
[信息]到目前为止，这款模块的最大意义仅仅是：我的自用&练手模块
[信息]关于HTTP访问，由于某些客观原因，比如：不打算只提供一两个子程序就完事，强大&易用的设计会导致涉及的内容极多，于是就......（真的不是因为懒癌......）

20170726：
[新增]QSJsonPointer（RFC6901）支持（用路径快速访问JSON）
[新增]QSJson_Ref.置数组成员
[新增]Json解析选项：允许尾随其他数据、JSONP兼容

20170723：
[信息]首个版本