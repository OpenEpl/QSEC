.程序集 Utils

.子程序 asm_整数加法, 整数型
.参数 a, 整数型
.参数 b, 整数型

置入代码 ({201, 139, 68, 36, 4, 3, 68, 36, 8, 194, 8, 0})
' 返回 (a ＋ b)
返回 (0)
.子程序 asm_读整型内存, 整数型
.参数 读取地址, 整数型

置入代码 ({139, 69, 8, 139, 0, 201, 194, 4, 0})
' 返回 (指针到整数 (读取地址))
' 兼容5.11
返回 (0)
.子程序 asm_读整型内存_指定偏移, 整数型
.参数 读取地址, 整数型
.参数 偏移, 整数型

' 汇编代码（需要使用AsmToECode程序编译）:
' @arg 读取地址
' @arg 偏移
' mov eax,读取地址
' mov ecx,偏移
' mov eax,[eax+ecx]
' @ret
置入代码 ({139, 69, 8, 139, 77, 12, 139, 4, 1, 201, 194, 8, 0})
' 返回 (指针到整数 (读取地址 ＋ 偏移))
' 兼容5.11
返回 (0)
.子程序 asm_写整型内存, 整数型, , 返回 参数 内存地址
.参数 内存地址, 整数型
.参数 内容, 整数型

置入代码 ({139, 77, 12, 139, 69, 8, 137, 8, 201, 194, 8, 0})
' 写到内存 (内容, 内存地址, )
返回 (0)
.子程序 asm_写整型内存_指定偏移, 整数型, , 返回 内存地址 + 偏移
.参数 内存地址, 整数型
.参数 内容, 整数型
.参数 偏移, 整数型

置入代码 ({139, 77, 12, 139, 69, 8, 3, 69, 16, 137, 8, 201, 194, 12, 0})
返回 (0)
.子程序 asm_乘4, 整数型
.参数 integer, 整数型

' 汇编代码（需要使用AsmToECode程序编译）:
' @arg integer
' mov eax,integer
' shl eax,2
' @ret
置入代码 ({139, 69, 8, 193, 224, 2, 201, 194, 4, 0})
返回 (0)
.子程序 asm_乘2, 整数型
.参数 integer, 整数型

' 汇编代码（需要使用AsmToECode程序编译）:
' @arg integer
' mov eax,integer
' shl eax,1
' @ret
置入代码 ({139, 69, 8, 193, 224, 1, 201, 194, 4, 0})
返回 (0)
.子程序 调用销毁回调
.参数 地址, 子程序指针
.参数 元素地址, 整数型
.参数 额外参数, 整数型

置入代码 ({201, 90, 88, 82, 255, 224})
.子程序 调用删除前处理回调
.参数 地址, 子程序指针
.参数 元素地址, 整数型
.参数 附加参数, 整数型

置入代码 ({201, 90, 88, 82, 255, 224})
.子程序 取变量数据地址_字节集, 整数型
.参数 变量, 字节集, 参考

' mov eax , dword [ebp+08h]
' mov eax , dword [eax]
' add eax , 00000008h
' leave
' retn 0004h
置入代码 ({139, 69, 8, 139, 0, 131, 192, 8, 201, 194, 4, 0})
' 返回 (取变量数据地址 (变量))
返回 (0)
.子程序 取变量数据地址_文本型, 整数型
.参数 变量, 文本型, 参考

' mov eax,[ebp+8]
' mov eax,[eax]
' leave
' retn 4
置入代码 ({139, 69, 8, 139, 0, 201, 194, 4, 0})
' 返回 (取变量数据地址 (变量))
返回 (0)
.子程序 SubPtr_IsNull, 逻辑型
.参数 SubPtr, 子程序指针

' AsmToECode代码:@arg SubPtr
' AsmToECode代码:xor eax,eax
' AsmToECode代码:cmp SubPtr,0
' AsmToECode代码:setz al
' AsmToECode代码:pop ebp
' AsmToECode代码:retn 4
置入代码 ({51, 192, 131, 125, 8, 0, 15, 148, 192, 93, 194, 4, 0})
返回 (假)