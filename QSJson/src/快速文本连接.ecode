.程序集 快速文本连接, <对象>, , 请勿修改方法位置
.程序集变量 缓冲区地址, 整数型
.程序集变量 缓冲区长度, 整数型
.程序集变量 内容长度, 整数型

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用

缓冲区长度 = 16
缓冲区地址 = HeapAlloc (GetProcessHeap (), 0, 缓冲区长度)
.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用

HeapFree (GetProcessHeap (), 0, 缓冲区地址)
.子程序 扩展, , 公开
.参数 扩展后最小大小, 整数型
.局部变量 两倍, 整数型
.局部变量 原缓冲区地址, 整数型

.如果真 (扩展后最小大小 <= 缓冲区长度)
    返回 ()
.如果真结束

原缓冲区地址 = 缓冲区地址

两倍 = 左移 (缓冲区长度, 1)

.如果 (两倍 < 扩展后最小大小)
    缓冲区长度 = 扩展后最小大小
.否则
    缓冲区长度 = 两倍
.如果结束

缓冲区地址 = HeapAlloc (GetProcessHeap (), 0, 缓冲区长度)
.如果真 (缓冲区地址 == 0)
    缓冲区地址 = HeapAlloc (GetProcessHeap (), #HEAP_GENERATE_EXCEPTIONS, 扩展后最小大小)
.如果真结束
.如果真 (内容长度 != 0)
    memcpy (缓冲区地址, 原缓冲区地址, 内容长度)
.如果真结束

HeapFree (GetProcessHeap (), 0, 原缓冲区地址)
.子程序 添加, , 公开
.参数 text, 文本型
.局部变量 len, 整数型
.局部变量 pchar, 整数型
.局部变量 新内容长度, 整数型
.局部变量 目标地址, 整数型

len = 取文本长度 (text)
pchar = 取变量数据地址_文本型 (text)
新内容长度 = asm_整数加法 (内容长度, len)
扩展 (新内容长度)
目标地址 = asm_整数加法 (缓冲区地址, 内容长度)
memcpy (目标地址, pchar, len)
内容长度 = 新内容长度
.子程序 添加字符, , 公开
.参数 char, 字节型
.局部变量 新内容长度, 整数型
.局部变量 目标地址, 整数型

新内容长度 = 内容长度
新内容长度 = 新内容长度 + 1
扩展 (新内容长度)
目标地址 = asm_整数加法 (缓冲区地址, 内容长度)

' 汇编代码（需要使用AsmToECode程序编译）:
' @arg pThis
' @arg char:byte
' @local 新内容长度
' @local 目标地址
' mov cl,char
' mov eax,目标地址
' mov byte ptr [eax],cl
置入代码 ({138, 77, 12, 139, 69, 248, 136, 8})

内容长度 = 新内容长度
.子程序 准备新增文本空间, , 公开
.参数 增加数, 整数型

扩展 (asm_整数加法 (内容长度, 增加数))
.子程序 取缓冲区地址, 整数型, 公开

返回 (缓冲区地址)
.子程序 取新增文本目标地址, 整数型, 公开

返回 (asm_整数加法 (缓冲区地址, 内容长度))
.子程序 增加内容长度, , 公开
.参数 增加数, 整数型

内容长度 = asm_整数加法 (内容长度, 增加数)
.子程序 取内容长度, 整数型, 公开

返回 (内容长度)
.子程序 清空, , 公开

HeapFree (GetProcessHeap (), 0, 缓冲区地址)
内容长度 = 0
缓冲区长度 = 16
缓冲区地址 = HeapAlloc (GetProcessHeap (), 0, 缓冲区长度)
.子程序 取文本, 文本型, 公开
.局部变量 text, 文本型

text = 取空白文本 (内容长度)
CopyMemoryToString (text, 缓冲区地址, 内容长度)
返回 (text)