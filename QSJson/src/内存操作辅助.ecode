.程序集 内存操作辅助

.子程序 asm_读整型内存, 整数型
.参数 读取地址, 整数型

置入代码 ({139, 69, 8, 139, 0, 201, 194, 4, 0})
' 返回 (指针到整数 (读取地址))
' 兼容5.11
返回 (0)
.子程序 asm_读整型内存_指定偏移, 整数型
.参数 读取地址, 整数型
.参数 偏移, 整数型

' 汇编代码（需要使用AsmToECode程序编译）:
' @arg 读取地址
' @arg 偏移
' mov eax,读取地址
' mov ecx,偏移
' mov eax,[eax+ecx]
' @ret
置入代码 ({139, 69, 8, 139, 77, 12, 139, 4, 1, 201, 194, 8, 0})
' 返回 (指针到整数 (读取地址 ＋ 偏移))
' 兼容5.11
返回 (0)
.子程序 asm_写整型内存, 整数型, , 返回 参数 内存地址
.参数 内存地址, 整数型
.参数 内容, 整数型

置入代码 ({139, 77, 12, 139, 69, 8, 137, 8, 201, 194, 8, 0})
' 写到内存 (内容, 内存地址, )
返回 (0)
.子程序 asm_写整型内存_指定偏移, 整数型, , 返回 内存地址 + 偏移
.参数 内存地址, 整数型
.参数 内容, 整数型
.参数 偏移, 整数型

置入代码 ({139, 77, 12, 139, 69, 8, 3, 69, 16, 137, 8, 201, 194, 12, 0})
返回 (0)
.子程序 指针到长整数, 长整数型
.参数 指针, 整数型

置入代码 ({201, 139, 68, 36, 4, 139, 80, 4, 139, 0, 194, 4, 0})
' leave
' mov eax,[esp+4]
' mov edx,[eax+4]
' mov eax,[eax]
' ret 4
返回 (0)
.子程序 取变量数据地址_文本型, 整数型
.参数 变量, 文本型, 参考

' mov eax,[ebp+8]
' mov eax,[eax]
' leave
' retn 4
置入代码 ({139, 69, 8, 139, 0, 201, 194, 4, 0})
返回 (0)