.程序集 Internal_ToJsonString

.子程序 fast_dtoa, , , Grisu2算法，C源码修改自https://github.com/miloyip/dtoa-benchmark/tree/master/src/emyg，MSVC2017编译后提取制作。感谢Milo Yip
.参数 d, 双精度小数型
.参数 buf, 整数型
.参数 out_len, 整数型, 参考

' 支持处理Infinity和NaN，区分 0 和 -0 （与JS规范保持一致）
置入代码 ({139, 85, 20, 131, 236, 76, 87, 139, 125, 12, 139, 199, 37, 0, 0, 240, 127, 199, 2, 0, 0, 0, 0, 51, 201, 117, 84, 61, 0, 0, 240, 127, 117, 77, 139, 77, 8, 139, 199, 37, 255, 255, 15, 0, 11, 200, 117, 44, 51, 192, 129, 231, 0, 0, 0, 128, 11, 199, 139, 69, 16, 116, 6, 198, 0, 45, 64, 255, 2, 199, 0, 73, 110, 102, 105, 199, 64, 4, 110, 105, 116, 121, 131, 2, 8, 95, 139, 229, 93, 194, 16, 0, 139, 69, 16, 95, 199, 0, 78, 97, 78, 0, 131, 2, 3, 139, 229, 93, 194, 16, 0, 139, 207, 51, 192, 129, 225, 0, 0, 0, 128, 83, 139, 93, 8, 11, 193, 139, 77, 16, 116, 18, 198, 1, 45, 65, 255, 2, 129, 231, 255, 255, 255, 127, 137, 93, 8, 137, 125, 12, 221, 69, 8, 217, 238, 218, 233, 137, 77, 232, 223, 224, 246, 196, 68, 122, 17, 91, 199, 1, 48, 46, 48, 0, 131, 2, 3, 95, 139, 229, 93, 194, 16, 0, 232, 174, 8, 0, 0, 5, 178, 8, 0, 0, 137, 69, 240, 5, 184, 2, 0, 0, 137, 69, 252, 5, 174, 0, 0, 0, 137, 69, 212, 139, 199, 193, 232, 20, 37, 255, 7, 0, 0, 116, 22, 129, 231, 255, 255, 15, 0, 131, 195, 0, 129, 215, 0, 0, 16, 0, 45, 51, 4, 0, 0, 235, 11, 129, 231, 255, 255, 15, 0, 184, 206, 251, 255, 255, 86, 139, 203, 137, 69, 216, 139, 247, 137, 125, 244, 15, 164, 206, 1, 3, 201, 137, 117, 220, 139, 209, 137, 77, 208, 141, 72, 255, 131, 194, 1, 139, 193, 137, 77, 16, 131, 214, 0, 137, 69, 12, 139, 206, 51, 192, 129, 225, 0, 0, 32, 0, 11, 193, 117, 43, 139, 125, 12, 235, 11, 141, 164, 36, 0, 0, 0, 0, 141, 100, 36, 0, 15, 164, 214, 1, 51, 192, 79, 139, 206, 3, 210, 129, 225, 0, 0, 32, 0, 11, 193, 116, 235, 137, 125, 12, 139, 125, 244, 15, 164, 214, 10, 137, 117, 228, 139, 117, 12, 193, 226, 10, 131, 238, 10, 137, 85, 224, 137, 117, 12, 133, 219, 117, 24, 129, 255, 0, 0, 16, 0, 117, 16, 139, 69, 216, 131, 201, 255, 186, 255, 255, 63, 0, 131, 192, 254, 235, 15, 139, 77, 208, 139, 85, 220, 131, 193, 255, 139, 69, 16, 131, 210, 255, 43, 198, 137, 69, 16, 139, 193, 139, 77, 16, 232, 120, 7, 0, 0, 185, 195, 255, 255, 255, 199, 69, 188, 254, 121, 159, 80, 43, 206, 199, 69, 192, 19, 68, 211, 63, 137, 77, 16, 219, 69, 16, 137, 69, 216, 137, 85, 248, 221, 93, 196, 221, 69, 196, 220, 77, 188, 217, 192, 232, 210, 6, 0, 0, 139, 200, 137, 77, 16, 219, 69, 16, 221, 93, 188, 221, 69, 188, 218, 233, 223, 224, 246, 196, 68, 123, 1, 65, 129, 193, 91, 1, 0, 0, 186, 92, 1, 0, 0, 193, 249, 3, 141, 4, 205, 8, 0, 0, 0, 43, 208, 139, 69, 240, 137, 85, 236, 139, 84, 200, 8, 137, 85, 16, 139, 84, 200, 12, 139, 69, 252, 137, 85, 240, 15, 191, 68, 72, 2, 139, 207, 137, 69, 252, 129, 225, 0, 0, 16, 0, 51, 192, 11, 193, 117, 20, 15, 164, 223, 1, 51, 192, 139, 207, 3, 219, 129, 225, 0, 0, 16, 0, 11, 193, 116, 236, 15, 164, 223, 11, 139, 194, 193, 227, 11, 247, 227, 137, 93, 208, 139, 240, 137, 125, 244, 139, 69, 16, 139, 218, 247, 231, 139, 200, 139, 250, 139, 69, 16, 247, 101, 208, 51, 192, 3, 209, 19, 192, 3, 214, 139, 240, 137, 69, 220, 131, 214, 0, 139, 69, 240, 129, 194, 0, 0, 0, 128, 131, 214, 0, 51, 201, 247, 101, 244, 3, 240, 139, 69, 224, 19, 202, 3, 247, 131, 209, 0, 3, 243, 137, 117, 220, 131, 209, 0, 247, 101, 240, 137, 77, 204, 139, 240, 139, 218, 139, 69, 16, 247, 101, 228, 139, 200, 139, 250, 139, 69, 16, 247, 101, 224, 51, 192, 3, 209, 19, 192, 3, 214, 139, 240, 137, 69, 224, 139, 69, 228, 131, 214, 0, 129, 194, 0, 0, 0, 128, 131, 214, 0, 51, 201, 247, 101, 240, 3, 240, 139, 69, 12, 19, 202, 139, 85, 252, 3, 247, 131, 209, 0, 3, 243, 137, 117, 224, 131, 209, 0, 131, 194, 64, 3, 194, 137, 77, 208, 137, 69, 252, 139, 69, 192, 137, 69, 192, 139, 69, 216, 247, 101, 240, 139, 240, 139, 218, 139, 69, 16, 247, 101, 248, 139, 200, 139, 250, 139, 69, 16, 247, 101, 216, 51, 192, 3, 209, 19, 192, 3, 214, 139, 240, 137, 69, 16, 139, 69, 240, 131, 214, 0, 129, 194, 0, 0, 0, 128, 131, 214, 0, 51, 201, 247, 101, 248, 3, 240, 19, 202, 3, 247, 139, 125, 208, 131, 209, 0, 3, 243, 139, 93, 224, 131, 209, 0, 131, 195, 255, 139, 195, 131, 215, 255, 43, 198, 139, 215, 27, 209, 139, 77, 252, 131, 192, 255, 137, 69, 248, 184, 1, 0, 0, 0, 131, 210, 255, 247, 217, 137, 85, 12, 51, 210, 137, 77, 252, 232, 158, 5, 0, 0, 139, 240, 137, 85, 228, 139, 203, 137, 117, 216, 43, 77, 220, 139, 199, 137, 77, 244, 139, 215, 27, 69, 204, 139, 77, 252, 137, 69, 240, 139, 195, 232, 153, 5, 0, 0, 139, 85, 228, 131, 198, 255, 137, 117, 200, 131, 210, 255, 137, 69, 220, 139, 202, 137, 85, 192, 35, 207, 35, 243, 137, 77, 204, 131, 248, 10, 115, 7, 184, 1, 0, 0, 0, 235, 106, 131, 248, 100, 115, 7, 184, 2, 0, 0, 0, 235, 94, 61, 232, 3, 0, 0, 115, 7, 184, 3, 0, 0, 0, 235, 80, 61, 16, 39, 0, 0, 115, 7, 184, 4, 0, 0, 0, 235, 66, 61, 160, 134, 1, 0, 115, 7, 184, 5, 0, 0, 0, 235, 52, 61, 64, 66, 15, 0, 115, 7, 184, 6, 0, 0, 0, 235, 38, 61, 128, 150, 152, 0, 115, 7, 184, 7, 0, 0, 0, 235, 24, 61, 0, 225, 245, 5, 115, 7, 184, 8, 0, 0, 0, 235, 10, 61, 0, 202, 154, 59, 27, 192, 131, 192, 10, 139, 125, 204, 51, 210, 137, 85, 16, 139, 77, 212, 72, 137, 69, 224, 51, 210, 139, 12, 129, 139, 69, 220, 247, 241, 139, 200, 137, 85, 220, 139, 69, 16, 133, 201, 117, 4, 133, 192, 116, 15, 139, 93, 232, 128, 193, 48, 136, 12, 3, 64, 137, 69, 16, 235, 3, 139, 93, 232, 139, 77, 252, 139, 194, 51, 210, 232, 162, 4, 0, 0, 3, 198, 137, 69, 208, 19, 215, 137, 85, 204, 59, 85, 12, 15, 130, 146, 1, 0, 0, 139, 85, 248, 119, 8, 59, 194, 15, 134, 133, 1, 0, 0, 139, 69, 224, 133, 192, 127, 154, 139, 198, 139, 207, 15, 164, 193, 2, 193, 224, 2, 3, 240, 139, 194, 19, 249, 139, 77, 12, 137, 77, 12, 15, 164, 193, 2, 15, 164, 247, 1, 193, 224, 2, 3, 246, 3, 208, 139, 69, 12, 19, 193, 139, 77, 252, 15, 164, 208, 1, 3, 210, 137, 69, 12, 137, 85, 248, 139, 198, 139, 215, 232, 87, 4, 0, 0, 138, 200, 139, 69, 16, 132, 201, 117, 4, 133, 192, 116, 10, 128, 193, 48, 136, 12, 3, 64, 137, 69, 16, 139, 77, 224, 35, 125, 192, 73, 35, 117, 200, 139, 85, 248, 137, 77, 224, 59, 125, 12, 119, 145, 114, 4, 59, 242, 115, 139, 1, 77, 236, 139, 193, 247, 216, 131, 248, 9, 127, 16, 141, 4, 141, 0, 0, 0, 0, 139, 77, 212, 43, 200, 139, 17, 235, 2, 51, 210, 139, 69, 240, 51, 201, 11, 200, 137, 85, 212, 116, 28, 247, 226, 51, 201, 137, 69, 252, 139, 69, 244, 247, 101, 212, 3, 200, 139, 69, 252, 137, 77, 240, 19, 194, 137, 69, 252, 235, 15, 139, 69, 244, 247, 226, 139, 200, 137, 69, 240, 139, 194, 137, 85, 252, 59, 248, 15, 135, 91, 1, 0, 0, 114, 8, 59, 241, 15, 131, 81, 1, 0, 0, 139, 85, 16, 139, 69, 248, 43, 198, 137, 69, 192, 139, 69, 12, 27, 199, 59, 69, 228, 15, 130, 56, 1, 0, 0, 139, 69, 216, 119, 9, 57, 69, 192, 15, 130, 42, 1, 0, 0, 139, 93, 228, 3, 198, 137, 69, 212, 19, 223, 59, 93, 252, 137, 93, 204, 139, 93, 232, 114, 62, 119, 4, 59, 193, 114, 56, 139, 69, 216, 43, 193, 139, 77, 228, 27, 77, 252, 3, 198, 137, 69, 200, 139, 69, 240, 19, 207, 43, 198, 137, 69, 192, 139, 69, 252, 27, 199, 59, 193, 15, 130, 232, 0, 0, 0, 119, 12, 139, 69, 192, 59, 69, 200, 15, 134, 218, 0, 0, 0, 139, 69, 212, 254, 76, 19, 255, 139, 240, 139, 125, 204, 139, 77, 240, 59, 125, 252, 15, 130, 116, 255, 255, 255, 15, 135, 188, 0, 0, 0, 59, 241, 15, 130, 102, 255, 255, 255, 233, 175, 0, 0, 0, 139, 69, 224, 51, 210, 139, 77, 212, 1, 69, 236, 139, 4, 129, 139, 77, 252, 232, 231, 2, 0, 0, 139, 125, 204, 137, 69, 212, 137, 85, 216, 59, 125, 240, 15, 135, 135, 0, 0, 0, 139, 117, 208, 114, 5, 59, 117, 244, 115, 125, 139, 85, 16, 144, 139, 77, 248, 139, 69, 12, 43, 206, 27, 199, 59, 69, 216, 114, 106, 139, 69, 212, 119, 4, 59, 200, 114, 97, 139, 77, 216, 3, 198, 137, 69, 208, 19, 207, 137, 77, 220, 59, 77, 240, 114, 59, 119, 5, 59, 69, 244, 114, 52, 139, 69, 212, 43, 69, 244, 139, 77, 216, 27, 77, 240, 3, 198, 137, 69, 200, 139, 69, 244, 19, 207, 43, 198, 137, 69, 192, 139, 69, 240, 27, 199, 59, 193, 114, 36, 119, 8, 139, 69, 192, 59, 69, 200, 118, 26, 139, 77, 220, 139, 69, 208, 254, 76, 19, 255, 139, 249, 139, 240, 59, 125, 240, 114, 142, 119, 5, 59, 117, 244, 114, 135, 139, 117, 16, 139, 69, 236, 141, 12, 48, 137, 77, 16, 133, 192, 120, 59, 131, 249, 21, 127, 54, 59, 241, 125, 27, 43, 206, 141, 60, 51, 139, 209, 184, 48, 48, 48, 48, 193, 233, 2, 243, 171, 139, 202, 131, 225, 3, 243, 170, 139, 77, 16, 139, 117, 20, 141, 65, 2, 102, 199, 4, 11, 46, 48, 1, 6, 94, 91, 95, 139, 229, 93, 194, 16, 0, 141, 81, 255, 137, 85, 12, 131, 250, 20, 119, 49, 141, 81, 1, 141, 78, 1, 59, 202, 124, 15, 141, 36, 36, 138, 68, 11, 255, 136, 4, 11, 73, 59, 202, 125, 244, 139, 69, 16, 198, 4, 3, 46, 141, 70, 1, 139, 117, 20, 1, 6, 94, 91, 95, 139, 229, 93, 194, 16, 0, 141, 65, 5, 131, 248, 5, 119, 94, 191, 2, 0, 0, 0, 43, 249, 137, 125, 16, 141, 12, 62, 59, 207, 124, 19, 139, 209, 43, 215, 3, 211, 138, 2, 141, 82, 255, 136, 4, 11, 73, 59, 207, 125, 243, 102, 199, 3, 48, 46, 131, 255, 2, 126, 31, 139, 77, 16, 141, 123, 2, 131, 193, 254, 184, 48, 48, 48, 48, 139, 209, 193, 233, 2, 243, 171, 139, 202, 131, 225, 3, 243, 170, 139, 125, 16, 141, 4, 62, 139, 117, 20, 1, 6, 94, 91, 95, 139, 229, 93, 194, 16, 0, 131, 254, 1, 117, 12, 139, 117, 20, 198, 67, 1, 101, 131, 6, 2, 235, 45, 141, 78, 1, 131, 249, 2, 124, 13, 138, 68, 11, 255, 136, 4, 11, 73, 131, 249, 2, 125, 243, 141, 12, 51, 198, 67, 1, 46, 141, 70, 2, 198, 65, 1, 101, 139, 117, 20, 139, 217, 137, 85, 12, 1, 6, 141, 123, 2, 139, 93, 12, 133, 219, 121, 8, 198, 7, 45, 71, 255, 6, 247, 219, 131, 251, 100, 124, 79, 184, 31, 133, 235, 81, 247, 235, 193, 250, 5, 139, 202, 193, 233, 31, 3, 202, 141, 65, 48, 136, 7, 107, 193, 156, 3, 216, 184, 103, 102, 102, 102, 247, 235, 193, 250, 2, 139, 202, 193, 233, 31, 3, 202, 141, 65, 48, 136, 71, 1, 138, 193, 192, 225, 2, 2, 193, 2, 192, 42, 216, 128, 195, 48, 136, 95, 2, 131, 6, 3, 94, 91, 95, 139, 229, 93, 194, 16, 0, 131, 251, 10, 124, 51, 184, 103, 102, 102, 102, 247, 235, 193, 250, 2, 139, 202, 193, 233, 31, 3, 202, 141, 65, 48, 136, 7, 138, 193, 192, 225, 2, 2, 193, 2, 192, 42, 216, 128, 195, 48, 136, 95, 1, 131, 6, 2, 94, 91, 95, 139, 229, 93, 194, 16, 0, 128, 195, 48, 136, 31, 255, 6, 94, 91, 95, 139, 229, 93, 194, 16, 0, 85, 139, 236, 131, 236, 32, 131, 228, 240, 217, 192, 217, 84, 36, 24, 223, 124, 36, 16, 223, 108, 36, 16, 139, 84, 36, 24, 139, 68, 36, 16, 133, 192, 116, 60, 222, 233, 133, 210, 121, 30, 217, 28, 36, 139, 12, 36, 129, 241, 0, 0, 0, 128, 129, 193, 255, 255, 255, 127, 131, 208, 0, 139, 84, 36, 20, 131, 210, 0, 235, 44, 217, 28, 36, 139, 12, 36, 129, 193, 255, 255, 255, 127, 131, 216, 0, 139, 84, 36, 20, 131, 218, 0, 235, 20, 139, 84, 36, 20, 247, 194, 255, 255, 255, 127, 117, 184, 217, 92, 36, 24, 217, 92, 36, 24, 201, 195, 128, 249, 64, 115, 21, 128, 249, 32, 115, 6, 15, 165, 194, 211, 224, 195, 139, 208, 51, 192, 128, 225, 31, 211, 226, 195, 51, 192, 51, 210, 195, 128, 249, 64, 115, 21, 128, 249, 32, 115, 6, 15, 173, 208, 211, 234, 195, 139, 194, 51, 210, 128, 225, 31, 211, 232, 195, 51, 192, 51, 210, 195, 139, 4, 36, 195, 136, 2, 28, 8, 160, 213, 143, 250, 118, 191, 62, 162, 127, 225, 174, 186, 118, 172, 85, 48, 32, 251, 22, 139, 234, 53, 206, 93, 74, 137, 66, 207, 45, 59, 101, 85, 170, 176, 107, 154, 223, 69, 26, 61, 3, 207, 26, 230, 202, 198, 154, 199, 23, 254, 112, 171, 79, 220, 188, 190, 252, 177, 119, 255, 12, 214, 107, 65, 239, 145, 86, 190, 60, 252, 127, 144, 173, 31, 208, 141, 131, 154, 85, 49, 40, 92, 81, 211, 181, 201, 166, 173, 143, 172, 113, 157, 203, 139, 238, 35, 119, 34, 156, 234, 109, 83, 120, 64, 145, 73, 204, 174, 87, 206, 182, 93, 121, 18, 60, 130, 55, 86, 251, 77, 54, 148, 16, 194, 79, 152, 72, 56, 111, 234, 150, 144, 199, 58, 130, 37, 203, 133, 116, 215, 244, 151, 191, 151, 205, 207, 134, 160, 229, 172, 42, 23, 152, 10, 52, 239, 142, 178, 53, 42, 251, 103, 56, 178, 59, 63, 198, 210, 223, 212, 200, 132, 186, 205, 211, 26, 39, 68, 221, 197, 150, 201, 37, 187, 206, 159, 107, 147, 132, 165, 98, 125, 36, 108, 172, 219, 246, 218, 95, 13, 88, 102, 171, 163, 38, 241, 195, 222, 147, 248, 226, 243, 184, 128, 255, 170, 168, 173, 181, 181, 139, 74, 124, 108, 5, 95, 98, 135, 83, 48, 193, 52, 96, 255, 188, 201, 85, 38, 186, 145, 140, 133, 78, 150, 189, 126, 41, 112, 36, 119, 249, 223, 143, 184, 229, 184, 159, 189, 223, 166, 148, 125, 116, 136, 207, 95, 169, 248, 207, 155, 168, 143, 147, 112, 68, 185, 107, 21, 15, 191, 248, 240, 8, 138, 182, 49, 49, 101, 85, 37, 176, 205, 172, 127, 123, 208, 198, 226, 63, 153, 6, 59, 43, 42, 196, 16, 92, 228, 211, 146, 115, 105, 153, 36, 36, 170, 14, 202, 0, 131, 242, 181, 135, 253, 235, 26, 17, 146, 100, 8, 229, 188, 204, 136, 80, 111, 9, 204, 188, 140, 44, 101, 25, 226, 88, 23, 183, 209, 0, 0, 0, 0, 0, 0, 64, 156, 0, 0, 0, 0, 16, 165, 212, 232, 0, 0, 98, 172, 197, 235, 120, 173, 132, 9, 148, 248, 120, 57, 63, 129, 179, 21, 7, 201, 123, 206, 151, 192, 112, 92, 234, 123, 206, 50, 126, 143, 104, 128, 233, 171, 164, 56, 210, 213, 69, 34, 154, 23, 38, 39, 79, 159, 39, 251, 196, 212, 49, 162, 99, 237, 168, 173, 200, 140, 56, 101, 222, 176, 219, 101, 171, 26, 142, 8, 199, 131, 154, 29, 113, 66, 249, 29, 93, 196, 88, 231, 27, 166, 44, 105, 77, 146, 234, 141, 112, 26, 100, 238, 1, 218, 74, 119, 239, 154, 153, 163, 109, 162, 133, 107, 125, 180, 123, 120, 9, 242, 119, 24, 221, 121, 161, 228, 84, 180, 194, 197, 155, 91, 146, 134, 91, 134, 61, 93, 150, 200, 197, 83, 53, 200, 179, 160, 151, 250, 92, 180, 42, 149, 227, 95, 160, 153, 189, 159, 70, 222, 37, 140, 57, 219, 52, 194, 155, 165, 92, 159, 152, 163, 114, 154, 198, 246, 206, 190, 233, 84, 83, 191, 220, 183, 226, 65, 34, 242, 23, 243, 252, 136, 165, 120, 92, 211, 155, 206, 32, 204, 223, 83, 33, 123, 243, 90, 22, 152, 58, 48, 31, 151, 220, 181, 160, 226, 150, 179, 227, 92, 83, 209, 217, 168, 60, 68, 167, 164, 217, 124, 155, 251, 16, 68, 164, 167, 76, 76, 118, 187, 26, 156, 64, 182, 239, 142, 171, 139, 44, 132, 87, 166, 16, 239, 31, 208, 41, 49, 145, 233, 229, 164, 16, 155, 157, 12, 156, 161, 251, 155, 16, 231, 41, 244, 59, 98, 217, 32, 40, 172, 133, 207, 167, 122, 94, 75, 68, 128, 45, 221, 172, 3, 64, 228, 33, 191, 143, 255, 68, 94, 47, 156, 103, 142, 65, 184, 140, 156, 157, 23, 51, 212, 169, 27, 227, 180, 146, 219, 25, 158, 217, 119, 223, 186, 110, 191, 150, 235, 107, 238, 240, 155, 59, 2, 135, 175, 60, 251, 87, 251, 114, 251, 140, 251, 167, 251, 193, 251, 220, 251, 246, 251, 17, 252, 44, 252, 70, 252, 97, 252, 123, 252, 150, 252, 177, 252, 203, 252, 230, 252, 0, 253, 27, 253, 53, 253, 80, 253, 107, 253, 133, 253, 160, 253, 186, 253, 213, 253, 239, 253, 10, 254, 37, 254, 63, 254, 90, 254, 116, 254, 143, 254, 169, 254, 196, 254, 223, 254, 249, 254, 20, 255, 46, 255, 73, 255, 99, 255, 126, 255, 153, 255, 179, 255, 206, 255, 232, 255, 3, 0, 30, 0, 56, 0, 83, 0, 109, 0, 136, 0, 162, 0, 189, 0, 216, 0, 242, 0, 13, 1, 39, 1, 66, 1, 92, 1, 119, 1, 146, 1, 172, 1, 199, 1, 225, 1, 252, 1, 22, 2, 49, 2, 76, 2, 102, 2, 129, 2, 155, 2, 182, 2, 208, 2, 235, 2, 6, 3, 32, 3, 59, 3, 85, 3, 112, 3, 139, 3, 165, 3, 192, 3, 218, 3, 245, 3, 15, 4, 42, 4, 1, 0, 0, 0, 10, 0, 0, 0, 100, 0, 0, 0, 232, 3, 0, 0, 16, 39, 0, 0, 160, 134, 1, 0, 64, 66, 15, 0, 128, 150, 152, 0, 0, 225, 245, 5, 0, 202, 154, 59})
.子程序 Internal_ToJsonString
.参数 JsonValue, 整数型
.参数 人类易读, 逻辑型, , 是否启用人类易读输出。默认：真。如果为 真 则生成易于阅读的文本
.参数 缩进级别, 整数型
.参数 缩进填充字符, 文本型
.参数 输出, 快速文本连接, 参考
.参数 Ex, Internal_QSJsonToStringExtensionParameter
.局部变量 length, 整数型
.局部变量 i, 整数型
.局部变量 type, 整数型
.局部变量
.局部变量 DataPtr, 整数型
.局部变量 DataLen, 整数型

type = JSON内存节点_取类型 (JsonValue)
.判断开始 (type == #QSJson_值类型_长整数)
    输出.添加 (到文本 (JSON内存节点_取长整数 (JsonValue)))
.判断 (type == #QSJson_值类型_双精度小数)
    输出双精度小数 (JSON内存节点_取双精度小数 (JsonValue), 输出)
.判断 (type == #QSJson_值类型_文本)
    JSON内存节点_取文本_内存地址 (JsonValue, DataPtr, DataLen)
    输出JSON文本 (DataPtr, DataLen, 输出, Ex)
.判断 (type == #QSJson_值类型_逻辑)
    .如果 (JSON内存节点_取逻辑 (JsonValue))
        输出.添加 (“true”)
    .否则
        输出.添加 (“false”)
    .如果结束
    
.判断 (type == #QSJson_值类型_空)
    输出.添加 (“null”)
.判断 (type == #QSJson_值类型_数组)
    length = JSON数组_取数量 (JSON内存节点_数组_取地址 (JsonValue))
    .如果 (length == 0)
        输出.添加 (“[]”)
    .否则
        输出.添加 (“[”)
        .如果真 (人类易读)
            输出.添加 (#换行符)
        .如果真结束
        
        缩进级别 = 缩进级别 + 1
        
        .如果真 (人类易读)
            输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
        .如果真结束
        
        Internal_ToJsonString (JSON数组_取 (JSON内存节点_数组_取地址 (JsonValue), 0), 人类易读, 缩进级别, 缩进填充字符, 输出, Ex)
        
        i = 1
        .判断循环首 (i < length)
            输出.添加 (“,”)
            .如果真 (人类易读)
                输出.添加 (#换行符)
                输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
            .如果真结束
            Internal_ToJsonString (JSON数组_取 (JSON内存节点_数组_取地址 (JsonValue), i), 人类易读, 缩进级别, 缩进填充字符, 输出, Ex)
            
            i = i + 1
        .判断循环尾 ()
        
        
        缩进级别 = 缩进级别 - 1
        
        .如果真 (人类易读)
            输出.添加 (#换行符)
            输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
        .如果真结束
        输出.添加 (“]”)
    .如果结束
    
.判断 (type == #QSJson_值类型_对象)
    i = JSON对象_元素_首个 (JSON内存节点_对象_取地址 (JsonValue))
    .如果 (i == 0)
        输出.添加 (“{}”)
    .否则
        输出.添加 (“{”)
        .如果真 (人类易读)
            输出.添加 (#换行符)
        .如果真结束
        缩进级别 = 缩进级别 + 1
        
        .如果真 (人类易读)
            输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
        .如果真结束
        
        JSON对象_元素_取键_内存地址 (i, DataPtr, DataLen)
        输出JSON文本 (DataPtr, DataLen, 输出, Ex)
        输出.添加 (“:”)
        
        Internal_ToJsonString (JSON对象_元素_取值 (i), 人类易读, 缩进级别, 缩进填充字符, 输出, Ex)
        
        i = JSON对象_元素_取下一元素 (i)
        .判断循环首 (i != 0)
            输出.添加 (“,”)
            .如果真 (人类易读)
                输出.添加 (#换行符)
                输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
            .如果真结束
            JSON对象_元素_取键_内存地址 (i, DataPtr, DataLen)
            输出JSON文本 (DataPtr, DataLen, 输出, Ex)
            输出.添加 (“:”)
            Internal_ToJsonString (JSON对象_元素_取值 (i), 人类易读, 缩进级别, 缩进填充字符, 输出, Ex)
            
            i = JSON对象_元素_取下一元素 (i)
        .判断循环尾 ()
        
        缩进级别 = 缩进级别 - 1
        
        .如果真 (人类易读)
            输出.添加 (#换行符)
            输出.添加 (取重复文本 (缩进级别, 缩进填充字符))
        .如果真结束
        输出.添加 (“}”)
    .如果结束
    
.默认
    
.判断结束

.子程序 输出双精度小数
.参数 value, 双精度小数型
.参数 输出, 快速文本连接
.局部变量 本次增加长度, 整数型

输出.准备新增文本空间 (32)
fast_dtoa (value, 输出.取新增文本目标地址 (), 本次增加长度)
输出.增加内容长度 (本次增加长度)
.子程序 输出JSON文本
.参数 pStart, 整数型
.参数 len, 整数型
.参数 输出, 快速文本连接
.参数 Ex, Internal_QSJsonToStringExtensionParameter
.局部变量 pEnd, 整数型, , , 不包括
.局部变量 pLast, 整数型
.局部变量 本次增加长度, 整数型
.局部变量 char, 字节型

输出.添加 (#引号)
pEnd = pStart + len
.如果真 (pStart != pEnd)
    .判断循环首 (真)
        pLast = pStart
        pStart = 寻找首个需转义字符 (pStart, pEnd, Ex.Mask_FirstByte)
        本次增加长度 = pStart - pLast
        .如果真 (本次增加长度 != 0)
            输出.准备新增文本空间 (本次增加长度)
            memcpy (输出.取新增文本目标地址 (), pLast, 本次增加长度)
            输出.增加内容长度 (本次增加长度)
        .如果真结束
        .如果真 (pStart >= pEnd)
            跳出循环 ()
        .如果真结束
        char = 指针到字节 (pStart)
        .判断开始 (char == 34)
            输出.添加 (“\” + #引号)
        .判断 (char == 92)
            输出.添加 (“\\”)
        .判断 (char == 13)
            输出.添加 (“\r”)
        .判断 (char == 10)
            输出.添加 (“\n”)
        .判断 (char == 9)
            输出.添加 (“\t”)
        .判断 (char == 8)
            输出.添加 (“\b”)
        .判断 (char == 12)
            输出.添加 (“\f”)
        .判断 (char < 16)
            输出.添加 (“\u000” + 取十六进制文本 (char))
        .默认
            输出.添加 (“\u00” + 取十六进制文本 (char))
        .判断结束
        pStart = pStart + 1
    .判断循环尾 ()
.如果真结束
输出.添加 (#引号)
.子程序 指针到字节, 字节型
.参数 指针, 整数型

置入代码 ({139, 69, 8, 15, 182, 0, 201, 194, 4, 0})
返回 (0)
.子程序 寻找首个需转义字符, 整数型, , 若返回值 ≥ pEnd，则未找到
.参数 pStart, 整数型
.参数 pEnd, 整数型, , Not including
.参数 Mask_FirstByte, 字节型

' AsmToECode代码:@arg pStart
' AsmToECode代码:@arg pEnd
' AsmToECode代码:@arg Mask_FirstByte:byte
' AsmToECode代码:mov eax,pStart
' AsmToECode代码:mov edx,pEnd
' AsmToECode代码:mov bl,Mask_FirstByte
' AsmToECode代码:.while eax<edx
' AsmToECode代码:mov cl,byte ptr [eax]
' AsmToECode代码:test cl,bl
' AsmToECode代码:.if !zero?
' AsmToECode代码:add eax,2
' AsmToECode代码:.continue
' AsmToECode代码:.endif
' AsmToECode代码:.break .if cl==22h || cl==5ch || cl<=1fh
' AsmToECode代码:inc eax
' AsmToECode代码:.endw
' AsmToECode代码:@ret
置入代码 ({139, 69, 8, 139, 85, 12, 138, 93, 16, 235, 27, 138, 8, 132, 203, 116, 5, 131, 192, 2, 235, 16, 128, 249, 34, 116, 15, 128, 249, 92, 116, 10, 128, 249, 31, 118, 5, 64, 59, 194, 114, 225, 201, 194, 12, 0})
返回 (0)
.子程序 fast_dtoa_e, 文本型
.参数 d, 双精度小数型
.局部变量 t, 文本型
.局部变量 len, 整数型

t = 取空白文本 (32)
fast_dtoa (d, 取变量数据地址_文本型 (t), len)
置入代码 ({139, 69, 252, 139, 77, 248, 198, 4, 8, 0, 201, 194, 8, 0})
' mov eax,[ebp-4]
' mov ecx,[ebp-8]
' mov byte [eax+ecx],0
' leave
' retn 8
返回 (“”)